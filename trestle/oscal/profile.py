# modified by fix_any.py
# -*- mode:python; coding:utf-8 -*-
# Copyright (c) 2020 IBM Corp. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# generated by datamodel-codegen:
#   filename:  profile.py_flat.json

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Dict, List, Optional

from pydantic import AnyUrl, EmailStr, Extra, Field, constr
from trestle.core.base_model import OscalBaseModel


class Property(OscalBaseModel):
    name: str = Field(
        ...,
        description='Identifying the purpose and intended use of the property, part or other object.',
        title='Name',
    )
    uuid: Optional[
        constr(
            regex=r'^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$'
        )
    ] = Field(
        None,
        description='A RFC 4122 version 4 Universally Unique Identifier (UUID) for the containing object.',
        title='Universally Unique Identifier',
    )
    ns: Optional[str] = Field(
        None, description='A namespace qualifying the name.', title='Namespace'
    )
    class_: Optional[str] = Field(
        None,
        alias='class',
        description='Indicating the type or classification of the containing object',
        title='Class',
    )
    value: str


class Link(OscalBaseModel):
    href: str = Field(
        ...,
        description='A link to a document or document fragment (actual, nominal or projected)',
        title='hypertext reference',
    )
    rel: Optional[str] = Field(
        None,
        description="Describes the type of relationship provided by the link. This can be an indicator of the link's purpose.",
        title='Relation',
    )
    media_type: Optional[str] = Field(
        None,
        alias='media-type',
        description='Describes the media type of the linked resource',
        title='Media type',
    )
    text: str


class Part(OscalBaseModel):
    id: Optional[str] = Field(
        None,
        description='Unique identifier of the containing object',
        title='Identifier',
    )
    name: str = Field(
        ...,
        description='Identifying the purpose and intended use of the property, part or other object.',
        title='Name',
    )
    ns: Optional[str] = Field(
        None, description='A namespace qualifying the name.', title='Namespace'
    )
    class_: Optional[str] = Field(
        None,
        alias='class',
        description='Indicating the type or classification of the containing object',
        title='Class',
    )
    title: Optional[str] = Field(
        None, description='A title for display and navigation', title='Title'
    )
    properties: Optional[List[Property]] = Field(None, min_items=1)
    prose: Optional[str] = Field(
        None,
        description='Prose permits multiple paragraphs, lists, tables etc.',
        title='Prose',
    )
    parts: Optional[List[Part]] = Field(None, min_items=1)
    links: Optional[List[Link]] = Field(None, min_items=1)


class RevisionHistoryItem(OscalBaseModel):
    title: Optional[str] = Field(
        None, description='A title for display and navigation', title='Title'
    )
    published: Optional[datetime] = Field(
        None,
        description='The date and time this document was published.',
        title='Publication Timestamp',
    )
    last_modified: Optional[datetime] = Field(
        None,
        alias='last-modified',
        description='Date and time of last modification.',
        title='Last modified timestamp',
    )
    version: Optional[str] = Field(
        None,
        description='The version of the document content.',
        title='Document version',
    )
    oscal_version: Optional[str] = Field(
        None,
        alias='oscal-version',
        description='OSCAL model version.',
        title='OSCAL version',
    )
    properties: Optional[List[Property]] = Field(None, min_items=1)
    links: Optional[List[Link]] = Field(None, min_items=1)
    remarks: Optional[str] = Field(
        None, description='Additional commentary on the parent item.', title='Remarks'
    )


class DocumentId(OscalBaseModel):
    type: str = Field(..., description='Qualifies the kind of document identifier.')
    identifier: str


class Annotation(OscalBaseModel):
    name: str = Field(
        ...,
        description='Identifying the purpose and intended use of the property, part or other object.',
        title='Name',
    )
    uuid: Optional[
        constr(
            regex=r'^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$'
        )
    ] = Field(
        None,
        description='A RFC 4122 version 4 Universally Unique Identifier (UUID) for the containing object.',
        title='Universally Unique Identifier',
    )
    ns: Optional[str] = Field(
        None, description='A namespace qualifying the name.', title='Namespace'
    )
    value: Optional[str] = Field(
        None, description='Indicates the value of the characteristic.', title='Value'
    )
    remarks: Optional[str] = Field(
        None, description='Additional commentary on the parent item.', title='Remarks'
    )


class Role(OscalBaseModel):
    id: str = Field(
        ...,
        description='Unique identifier of the containing object',
        title='Identifier',
    )
    title: str = Field(
        ..., description='A title for display and navigation', title='Title'
    )
    short_name: Optional[str] = Field(
        None,
        alias='short-name',
        description='A common name, short name or acronym',
        title='short-name',
    )
    desc: Optional[str] = Field(
        None, description='A short textual description', title='Description'
    )
    properties: Optional[List[Property]] = Field(None, min_items=1)
    annotations: Optional[List[Annotation]] = Field(None, min_items=1)
    links: Optional[List[Link]] = Field(None, min_items=1)
    remarks: Optional[str] = Field(
        None, description='Additional commentary on the parent item.', title='Remarks'
    )


class Address(OscalBaseModel):
    type: Optional[str] = Field(None, description='Indicates the type of address.')
    postal_address: Optional[List[str]] = Field(
        None, alias='postal-address', min_items=1
    )
    city: Optional[str] = Field(
        None,
        description='City, town or geographical region for mailing address',
        title='City',
    )
    state: Optional[str] = Field(
        None,
        description='State, province or analogous geographical region for mailing address',
        title='State',
    )
    postal_code: Optional[str] = Field(
        None,
        alias='postal-code',
        description='Postal or ZIP code for mailing address',
        title='Postal Code',
    )
    country: Optional[str] = Field(
        None, description='Country for mailing address', title='Country'
    )


class EmailAddress(OscalBaseModel):
    __root__: EmailStr = Field(..., description='Email address')


class TelephoneNumber(OscalBaseModel):
    type: Optional[str] = Field(None, description='Indicates the type of phone number.')
    number: str


class Location(OscalBaseModel):
    uuid: constr(
        regex=r'^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$'
    ) = Field(
        ...,
        description='A RFC 4122 version 4 Universally Unique Identifier (UUID) for the containing object.',
        title='Universally Unique Identifier',
    )
    title: Optional[str] = Field(
        None, description='A title for display and navigation', title='Title'
    )
    address: Address = Field(..., description='A postal address.', title='Address')
    email_addresses: Optional[List[EmailAddress]] = Field(
        None, alias='email-addresses', min_items=1
    )
    telephone_numbers: Optional[List[TelephoneNumber]] = Field(
        None, alias='telephone-numbers', min_items=1
    )
    URLs: Optional[List[AnyUrl]] = Field(None, min_items=1)
    properties: Optional[List[Property]] = Field(None, min_items=1)
    annotations: Optional[List[Annotation]] = Field(None, min_items=1)
    links: Optional[List[Link]] = Field(None, min_items=1)
    remarks: Optional[str] = Field(
        None, description='Additional commentary on the parent item.', title='Remarks'
    )


class Type(Enum):
    person = 'person'
    organization = 'organization'


class ExternalId(OscalBaseModel):
    type: str = Field(
        ...,
        description='Indicating the type of identifier, address, email or other data item.',
        title='Type',
    )
    id: str


class MemberOfOrganization(OscalBaseModel):
    __root__: constr(
        regex=r'^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$'
    ) = Field(
        ...,
        description='Identifies that the containing object is a member of the organization associated with the provided UUID.',
    )


class LocationUuid(OscalBaseModel):
    __root__: constr(
        regex=r'^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$'
    ) = Field(..., description='References a location defined in metadata.')


class Party(OscalBaseModel):
    uuid: constr(
        regex=r'^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$'
    ) = Field(
        ...,
        description='A RFC 4122 version 4 Universally Unique Identifier (UUID) for the containing object.',
        title='Universally Unique Identifier',
    )
    type: Type = Field(
        ...,
        description='A category describing the kind of party the object describes.',
        title='Party Type',
    )
    party_name: str = Field(
        ...,
        alias='party-name',
        description='The full (legal) name of the party.',
        title='Party Name',
    )
    short_name: Optional[str] = Field(
        None,
        alias='short-name',
        description='A common name, short name or acronym',
        title='short-name',
    )
    external_ids: Optional[List[ExternalId]] = Field(
        None, alias='external-ids', min_items=1
    )
    properties: Optional[List[Property]] = Field(None, min_items=1)
    annotations: Optional[List[Annotation]] = Field(None, min_items=1)
    links: Optional[List[Link]] = Field(None, min_items=1)
    addresses: Optional[List[Address]] = Field(None, min_items=1)
    email_addresses: Optional[List[EmailAddress]] = Field(
        None, alias='email-addresses', min_items=1
    )
    telephone_numbers: Optional[List[TelephoneNumber]] = Field(
        None, alias='telephone-numbers', min_items=1
    )
    member_of_organizations: Optional[List[MemberOfOrganization]] = Field(
        None, alias='member-of-organizations', min_items=1
    )
    location_uuids: Optional[List[LocationUuid]] = Field(
        None, alias='location-uuids', min_items=1
    )
    remarks: Optional[str] = Field(
        None, description='Additional commentary on the parent item.', title='Remarks'
    )


class Metadata(OscalBaseModel):
    title: str = Field(
        ..., description='A title for display and navigation', title='Title'
    )
    published: Optional[datetime] = Field(
        None,
        description='The date and time this document was published.',
        title='Publication Timestamp',
    )
    last_modified: datetime = Field(
        ...,
        alias='last-modified',
        description='Date and time of last modification.',
        title='Last modified timestamp',
    )
    version: str = Field(
        ...,
        description='The version of the document content.',
        title='Document version',
    )
    oscal_version: str = Field(
        ...,
        alias='oscal-version',
        description='OSCAL model version.',
        title='OSCAL version',
    )
    revision_history: Optional[List[RevisionHistoryItem]] = Field(
        None, alias='revision-history', min_items=1
    )
    document_ids: Optional[List[DocumentId]] = Field(
        None, alias='document-ids', min_items=1
    )
    properties: Optional[List[Property]] = Field(None, min_items=1)
    links: Optional[List[Link]] = Field(None, min_items=1)
    roles: Optional[List[Role]] = Field(None, min_items=1)
    locations: Optional[List[Location]] = Field(None, min_items=1)
    parties: Optional[List[Party]] = Field(None, min_items=1)
    responsible_parties: Optional[Dict[str, ResponsibleParty]] = Field(
        None, alias='responsible-parties'
    )
    remarks: Optional[str] = Field(
        None, description='Additional commentary on the parent item.', title='Remarks'
    )


class WithChildControls(Enum):
    yes = 'yes'
    no = 'no'


class All(OscalBaseModel):
    with_child_controls: Optional[WithChildControls] = Field(
        None,
        alias='with-child-controls',
        description='When a control is included, whether its child (dependent) controls are also included.',
        title='Include contained controls with control',
    )


class IdSelector(OscalBaseModel):
    control_id: str = Field(
        ...,
        alias='control-id',
        description="Value of the 'id' flag on a target control",
        title='Control ID',
    )
    with_child_controls: Optional[WithChildControls] = Field(
        None,
        alias='with-child-controls',
        description='When a control is included, whether its child (dependent) controls are also included.',
        title='Include contained controls with control',
    )


class Order(Enum):
    keep = 'keep'
    ascending = 'ascending'
    descending = 'descending'


class PatternSelector(OscalBaseModel):
    pattern: Optional[str] = Field(
        None,
        description='A regular expression matching the IDs of one or more controls to be selected',
        title='Pattern',
    )
    order: Optional[Order] = Field(
        None,
        description='A designation of how a selection of controls in a profile is to be ordered.',
        title='Order',
    )
    with_child_controls: Optional[WithChildControls] = Field(
        None,
        alias='with-child-controls',
        description='When a control is included, whether its child (dependent) controls are also included.',
        title='Include contained controls with control',
    )


class Include(OscalBaseModel):
    all: Optional[All] = Field(
        None,
        description='Include all controls from the imported resource (catalog)',
        title='Include all',
    )
    id_selectors: Optional[List[IdSelector]] = Field(
        None, alias='id-selectors', min_items=1
    )
    pattern_selectors: Optional[List[PatternSelector]] = Field(
        None, alias='pattern-selectors', min_items=1
    )


class Exclude(OscalBaseModel):
    id_selectors: Optional[List[IdSelector]] = Field(
        None, alias='id-selectors', min_items=1
    )
    pattern_selectors: Optional[List[PatternSelector]] = Field(
        None, alias='pattern-selectors', min_items=1
    )


class Import(OscalBaseModel):
    href: str = Field(
        ...,
        description='A link to a document or document fragment (actual, nominal or projected)',
        title='hypertext reference',
    )
    include: Optional[Include] = Field(
        None,
        description='Specifies which controls to include from the resource (source catalog) being imported',
        title='Include controls',
    )
    exclude: Optional[Exclude] = Field(
        None,
        description='Which controls to exclude from the resource (source catalog) being imported',
        title='Exclude controls',
    )


class Method(Enum):
    use_first = 'use-first'
    merge = 'merge'
    keep = 'keep'


class Combine(OscalBaseModel):
    method: Optional[Method] = Field(
        None,
        description='How clashing controls should be handled',
        title='Combination method',
    )


class Description(OscalBaseModel):
    id: Optional[str] = Field(
        None,
        description='Unique identifier of the containing object',
        title='Identifier',
    )
    summary: str


class Constraint(OscalBaseModel):
    test: Optional[str] = Field(
        None,
        description='A formal (executable) expression of a constraint',
        title='Constraint test',
    )
    detail: str


class GuidanceItem(OscalBaseModel):
    prose: Optional[str] = Field(
        None,
        description='Prose permits multiple paragraphs, lists, tables etc.',
        title='Prose',
    )


class Select(OscalBaseModel):
    how_many: Optional[str] = Field(
        None,
        alias='how-many',
        description='When selecting, a requirement such as one or more',
        title='Cardinality',
    )
    alternatives: Optional[List[str]] = Field(None, min_items=1)


class Parameter(OscalBaseModel):
    id: str = Field(
        ...,
        description='Unique identifier of the containing object',
        title='Identifier',
    )
    class_: Optional[str] = Field(
        None,
        alias='class',
        description='Indicating the type or classification of the containing object',
        title='Class',
    )
    depends_on: Optional[str] = Field(
        None,
        alias='depends-on',
        description='Another parameter invoking this one',
        title='Depends on',
    )
    label: Optional[str] = Field(
        None,
        description='A placeholder for a missing value, in display.',
        title='Parameter label',
    )
    descriptions: Optional[List[Description]] = Field(None, min_items=1)
    constraints: Optional[List[Constraint]] = Field(None, min_items=1)
    guidance: Optional[List[GuidanceItem]] = Field(None, min_items=1)
    value: Optional[str] = Field(
        None,
        description='Indicates a permissible value for a parameter or property',
        title='Value constraint',
    )
    select: Optional[Select] = Field(
        None, description='Presenting a choice among alternatives', title='Selection'
    )
    links: Optional[List[Link]] = Field(None, min_items=1)


class Group(OscalBaseModel):
    id: Optional[str] = Field(
        None,
        description='Unique identifier of the containing object',
        title='Identifier',
    )
    class_: Optional[str] = Field(
        None,
        alias='class',
        description='Indicating the type or classification of the containing object',
        title='Class',
    )
    title: Optional[str] = Field(
        None, description='A title for display and navigation', title='Title'
    )
    parameters: Optional[List[Parameter]] = Field(None, min_items=1)
    properties: Optional[List[Property]] = Field(None, min_items=1)
    parts: Optional[List[Part]] = Field(None, min_items=1)
    groups: Optional[List[Group]] = Field(None, min_items=1)
    id_selectors: Optional[List[IdSelector]] = Field(
        None, alias='id-selectors', min_items=1
    )
    pattern_selectors: Optional[List[PatternSelector]] = Field(
        None, alias='pattern-selectors', min_items=1
    )


class Custom(OscalBaseModel):
    groups: Optional[List[Group]] = Field(None, min_items=1)
    id_selectors: Optional[List[IdSelector]] = Field(
        None, alias='id-selectors', min_items=1
    )
    pattern_selectors: Optional[List[PatternSelector]] = Field(
        None, alias='pattern-selectors', min_items=1
    )


class Merge(OscalBaseModel):
    combine: Optional[Combine] = Field(
        None,
        description='A Combine element defines whether and how to combine multiple (competing) versions of the same control',
        title='Combination rule',
    )
    as_is: Optional[bool] = Field(
        None,
        alias='as-is',
        description='An As-is element indicates that the controls should be structured in resolution as they are structured in their source catalogs. It does not contain any elements or attributes.',
        title='As is',
    )
    custom: Optional[Custom] = Field(
        None,
        description='A Custom element frames a structure for embedding represented controls in resolution.',
        title='Custom grouping',
    )


class Removal(OscalBaseModel):
    name_ref: Optional[str] = Field(
        None,
        alias='name-ref',
        description='Items to remove, by assigned name',
        title='Reference by (assigned) name',
    )
    class_ref: Optional[str] = Field(
        None,
        alias='class-ref',
        description='Items to remove, by class. A token match.',
        title='Reference by class',
    )
    id_ref: Optional[str] = Field(
        None,
        alias='id-ref',
        description='Items to remove, indicated by their IDs',
        title='Reference by ID',
    )
    item_name: Optional[str] = Field(
        None,
        alias='item-name',
        description="Items to remove, by the name of the item's type, or generic identifier, e.g. title or prop",
        title='References by item name or generic identifier',
    )


class Position(Enum):
    before = 'before'
    after = 'after'
    starting = 'starting'
    ending = 'ending'


class Addition(OscalBaseModel):
    position: Optional[Position] = Field(
        None,
        description='Where to add the new content with respect to the targeted element (beside it or inside it)',
        title='Position',
    )
    id_ref: Optional[str] = Field(
        None,
        alias='id-ref',
        description='Target location of the addition.',
        title='Reference by ID',
    )
    title: Optional[str] = Field(
        None, description='A title for display and navigation', title='Title'
    )
    parameters: Optional[List[Parameter]] = Field(None, min_items=1)
    properties: Optional[List[Property]] = Field(None, min_items=1)
    annotations: Optional[List[Annotation]] = Field(None, min_items=1)
    links: Optional[List[Link]] = Field(None, min_items=1)
    parts: Optional[List[Part]] = Field(None, min_items=1)


class Alteration(OscalBaseModel):
    control_id: Optional[str] = Field(
        None,
        alias='control-id',
        description="Value of the 'id' flag on a target control",
        title='Control ID',
    )
    removals: Optional[List[Removal]] = Field(None, min_items=1)
    additions: Optional[List[Addition]] = Field(None, min_items=1)


class Modify(OscalBaseModel):
    parameter_settings: Optional[Dict[str, SetParameter]] = Field(
        None, alias='parameter-settings'
    )
    alterations: Optional[List[Alteration]] = Field(None, min_items=1)


class Citation(OscalBaseModel):
    text: str = Field(
        ...,
        description='A line of textual content whose semantic is determined by the context of use.',
        title='Text',
    )
    properties: Optional[List[Property]] = Field(None, min_items=1)
    biblio: Optional[Dict[str, Any]] = Field(
        None,
        description='A container in which a set of bibliographic information can included. The model of this information is undefined by OSCAL.',
        title='Bibliographic Definition',
    )


class Hash(OscalBaseModel):
    algorithm: str = Field(
        ..., description='Method by which a hash is derived', title='Hash algorithm'
    )
    value: str


class Rlink(OscalBaseModel):
    href: str = Field(
        ...,
        description='A link to a document or document fragment (actual, nominal or projected)',
        title='hypertext reference',
    )
    media_type: Optional[str] = Field(
        None,
        alias='media-type',
        description='Describes the media type of the linked resource',
        title='Media type',
    )
    hashes: Optional[List[Hash]] = Field(None, min_items=1)


class Attachment(OscalBaseModel):
    filename: Optional[str] = Field(
        None,
        description='Name of the file before it was encoded as Base64 to be embedded in a resource. This is the name that will be assigned to the file when the file is decoded.',
        title='File Name',
    )
    media_type: Optional[str] = Field(
        None,
        alias='media-type',
        description='Describes the media type of the linked resource',
        title='Media type',
    )
    value: str


class Resource(OscalBaseModel):
    uuid: constr(
        regex=r'^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$'
    ) = Field(
        ...,
        description='A RFC 4122 version 4 Universally Unique Identifier (UUID) for the containing object.',
        title='Universally Unique Identifier',
    )
    title: Optional[str] = Field(
        None, description='A title for display and navigation', title='Title'
    )
    desc: Optional[str] = Field(
        None, description='A short textual description', title='Description'
    )
    properties: Optional[List[Property]] = Field(None, min_items=1)
    document_ids: Optional[List[DocumentId]] = Field(
        None, alias='document-ids', min_items=1
    )
    citation: Optional[Citation] = Field(
        None,
        description='A citation consisting of end note text and optional structured bibliographic data.',
        title='Citation',
    )
    rlinks: Optional[List[Rlink]] = Field(None, min_items=1)
    attachments: Optional[List[Attachment]] = Field(None, min_items=1)
    remarks: Optional[str] = Field(
        None, description='Additional commentary on the parent item.', title='Remarks'
    )


class BackMatter(OscalBaseModel):
    resources: Optional[List[Resource]] = Field(None, min_items=1)


class Profile(OscalBaseModel):
    uuid: constr(
        regex=r'^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$'
    ) = Field(
        ...,
        description='A RFC 4122 version 4 Universally Unique Identifier (UUID) for the containing object.',
        title='Universally Unique Identifier',
    )
    metadata: Metadata = Field(
        ...,
        description='Provides information about the publication and availability of the containing document.',
        title='Publication metadata',
    )
    imports: List[Import] = Field(..., min_items=1)
    merge: Optional[Merge] = Field(
        None,
        description='A Merge element merges controls in resolution.',
        title='Merge controls',
    )
    modify: Optional[Modify] = Field(
        None,
        description='Set parameters or amend controls in resolution',
        title='Modify controls',
    )
    back_matter: Optional[BackMatter] = Field(
        None,
        alias='back-matter',
        description='A collection of citations and resource references.',
        title='Back matter',
    )


class Model(OscalBaseModel):
    profile: Profile


Part.update_forward_refs()

