# modified by fix_any.py
# -*- mode:python; coding:utf-8 -*-
# Copyright (c) 2020 IBM Corp. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# generated by datamodel-codegen:
#   filename:  ssp.py_flat.json

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Dict, List, Optional

from pydantic import AnyUrl, EmailStr, Extra, Field, constr
from trestle.core.base_model import OscalBaseModel


class Property(OscalBaseModel):
    name: str = Field(
        ...,
        description='Identifying the purpose and intended use of the property, part or other object.',
        title='Name',
    )
    uuid: Optional[
        constr(
            regex=r'^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$'
        )
    ] = Field(
        None,
        description='A RFC 4122 version 4 Universally Unique Identifier (UUID) for the containing object.',
        title='Universally Unique Identifier',
    )
    ns: Optional[str] = Field(
        None, description='A namespace qualifying the name.', title='Namespace'
    )
    class_: Optional[str] = Field(
        None,
        alias='class',
        description='Indicating the type or classification of the containing object',
        title='Class',
    )
    value: str


class Link(OscalBaseModel):
    href: str = Field(
        ...,
        description='A link to a document or document fragment (actual, nominal or projected)',
        title='hypertext reference',
    )
    rel: Optional[str] = Field(
        None,
        description="Describes the type of relationship provided by the link. This can be an indicator of the link's purpose.",
        title='Relation',
    )
    media_type: Optional[str] = Field(
        None,
        alias='media-type',
        description='Describes the media type of the linked resource',
        title='Media type',
    )
    text: str


class RevisionHistoryItem(OscalBaseModel):
    title: Optional[str] = Field(
        None, description='A title for display and navigation', title='Title'
    )
    published: Optional[datetime] = Field(
        None,
        description='The date and time this document was published.',
        title='Publication Timestamp',
    )
    last_modified: Optional[datetime] = Field(
        None,
        alias='last-modified',
        description='Date and time of last modification.',
        title='Last modified timestamp',
    )
    version: Optional[str] = Field(
        None,
        description='The version of the document content.',
        title='Document version',
    )
    oscal_version: Optional[str] = Field(
        None,
        alias='oscal-version',
        description='OSCAL model version.',
        title='OSCAL version',
    )
    properties: Optional[List[Property]] = Field(None, min_items=1)
    links: Optional[List[Link]] = Field(None, min_items=1)
    remarks: Optional[str] = Field(
        None, description='Additional commentary on the parent item.', title='Remarks'
    )


class DocumentId(OscalBaseModel):
    type: str = Field(..., description='Qualifies the kind of document identifier.')
    identifier: str


class Annotation(OscalBaseModel):
    name: str = Field(
        ...,
        description='Identifying the purpose and intended use of the property, part or other object.',
        title='Name',
    )
    uuid: Optional[
        constr(
            regex=r'^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$'
        )
    ] = Field(
        None,
        description='A RFC 4122 version 4 Universally Unique Identifier (UUID) for the containing object.',
        title='Universally Unique Identifier',
    )
    ns: Optional[str] = Field(
        None, description='A namespace qualifying the name.', title='Namespace'
    )
    value: Optional[str] = Field(
        None, description='Indicates the value of the characteristic.', title='Value'
    )
    remarks: Optional[str] = Field(
        None, description='Additional commentary on the parent item.', title='Remarks'
    )


class Role(OscalBaseModel):
    id: str = Field(
        ...,
        description='Unique identifier of the containing object',
        title='Identifier',
    )
    title: str = Field(
        ..., description='A title for display and navigation', title='Title'
    )
    short_name: Optional[str] = Field(
        None,
        alias='short-name',
        description='A common name, short name or acronym',
        title='short-name',
    )
    desc: Optional[str] = Field(
        None, description='A short textual description', title='Description'
    )
    properties: Optional[List[Property]] = Field(None, min_items=1)
    annotations: Optional[List[Annotation]] = Field(None, min_items=1)
    links: Optional[List[Link]] = Field(None, min_items=1)
    remarks: Optional[str] = Field(
        None, description='Additional commentary on the parent item.', title='Remarks'
    )


class Address(OscalBaseModel):
    type: Optional[str] = Field(None, description='Indicates the type of address.')
    postal_address: Optional[List[str]] = Field(
        None, alias='postal-address', min_items=1
    )
    city: Optional[str] = Field(
        None,
        description='City, town or geographical region for mailing address',
        title='City',
    )
    state: Optional[str] = Field(
        None,
        description='State, province or analogous geographical region for mailing address',
        title='State',
    )
    postal_code: Optional[str] = Field(
        None,
        alias='postal-code',
        description='Postal or ZIP code for mailing address',
        title='Postal Code',
    )
    country: Optional[str] = Field(
        None, description='Country for mailing address', title='Country'
    )


class EmailAddress(OscalBaseModel):
    __root__: EmailStr = Field(..., description='Email address')


class TelephoneNumber(OscalBaseModel):
    type: Optional[str] = Field(None, description='Indicates the type of phone number.')
    number: str


class Location(OscalBaseModel):
    uuid: constr(
        regex=r'^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$'
    ) = Field(
        ...,
        description='A RFC 4122 version 4 Universally Unique Identifier (UUID) for the containing object.',
        title='Universally Unique Identifier',
    )
    title: Optional[str] = Field(
        None, description='A title for display and navigation', title='Title'
    )
    address: Address = Field(..., description='A postal address.', title='Address')
    email_addresses: Optional[List[EmailAddress]] = Field(
        None, alias='email-addresses', min_items=1
    )
    telephone_numbers: Optional[List[TelephoneNumber]] = Field(
        None, alias='telephone-numbers', min_items=1
    )
    URLs: Optional[List[AnyUrl]] = Field(None, min_items=1)
    properties: Optional[List[Property]] = Field(None, min_items=1)
    annotations: Optional[List[Annotation]] = Field(None, min_items=1)
    links: Optional[List[Link]] = Field(None, min_items=1)
    remarks: Optional[str] = Field(
        None, description='Additional commentary on the parent item.', title='Remarks'
    )


class Type(Enum):
    person = 'person'
    organization = 'organization'


class ExternalId(OscalBaseModel):
    type: str = Field(
        ...,
        description='Indicating the type of identifier, address, email or other data item.',
        title='Type',
    )
    id: str


class MemberOfOrganization(OscalBaseModel):
    __root__: constr(
        regex=r'^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$'
    ) = Field(
        ...,
        description='Identifies that the containing object is a member of the organization associated with the provided UUID.',
    )


class LocationUuid(OscalBaseModel):
    __root__: constr(
        regex=r'^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$'
    ) = Field(..., description='References a location defined in metadata.')


class Party(OscalBaseModel):
    uuid: constr(
        regex=r'^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$'
    ) = Field(
        ...,
        description='A RFC 4122 version 4 Universally Unique Identifier (UUID) for the containing object.',
        title='Universally Unique Identifier',
    )
    type: Type = Field(
        ...,
        description='A category describing the kind of party the object describes.',
        title='Party Type',
    )
    party_name: str = Field(
        ...,
        alias='party-name',
        description='The full (legal) name of the party.',
        title='Party Name',
    )
    short_name: Optional[str] = Field(
        None,
        alias='short-name',
        description='A common name, short name or acronym',
        title='short-name',
    )
    external_ids: Optional[List[ExternalId]] = Field(
        None, alias='external-ids', min_items=1
    )
    properties: Optional[List[Property]] = Field(None, min_items=1)
    annotations: Optional[List[Annotation]] = Field(None, min_items=1)
    links: Optional[List[Link]] = Field(None, min_items=1)
    addresses: Optional[List[Address]] = Field(None, min_items=1)
    email_addresses: Optional[List[EmailAddress]] = Field(
        None, alias='email-addresses', min_items=1
    )
    telephone_numbers: Optional[List[TelephoneNumber]] = Field(
        None, alias='telephone-numbers', min_items=1
    )
    member_of_organizations: Optional[List[MemberOfOrganization]] = Field(
        None, alias='member-of-organizations', min_items=1
    )
    location_uuids: Optional[List[LocationUuid]] = Field(
        None, alias='location-uuids', min_items=1
    )
    remarks: Optional[str] = Field(
        None, description='Additional commentary on the parent item.', title='Remarks'
    )


class Metadata(OscalBaseModel):
    title: str = Field(
        ..., description='A title for display and navigation', title='Title'
    )
    published: Optional[datetime] = Field(
        None,
        description='The date and time this document was published.',
        title='Publication Timestamp',
    )
    last_modified: datetime = Field(
        ...,
        alias='last-modified',
        description='Date and time of last modification.',
        title='Last modified timestamp',
    )
    version: str = Field(
        ...,
        description='The version of the document content.',
        title='Document version',
    )
    oscal_version: str = Field(
        ...,
        alias='oscal-version',
        description='OSCAL model version.',
        title='OSCAL version',
    )
    revision_history: Optional[List[RevisionHistoryItem]] = Field(
        None, alias='revision-history', min_items=1
    )
    document_ids: Optional[List[DocumentId]] = Field(
        None, alias='document-ids', min_items=1
    )
    properties: Optional[List[Property]] = Field(None, min_items=1)
    links: Optional[List[Link]] = Field(None, min_items=1)
    roles: Optional[List[Role]] = Field(None, min_items=1)
    locations: Optional[List[Location]] = Field(None, min_items=1)
    parties: Optional[List[Party]] = Field(None, min_items=1)
    responsible_parties: Optional[Dict[str, ResponsibleParty]] = Field(
        None, alias='responsible-parties'
    )
    remarks: Optional[str] = Field(
        None, description='Additional commentary on the parent item.', title='Remarks'
    )


class ImportProfile(OscalBaseModel):
    href: str = Field(
        ...,
        description='A link to a document or document fragment (actual, nominal or projected)',
        title='hypertext reference',
    )
    remarks: Optional[str] = Field(
        None, description='Additional commentary on the parent item.', title='Remarks'
    )


class SystemId(OscalBaseModel):
    identifier_type: Optional[AnyUrl] = Field(
        None,
        alias='identifier-type',
        description='Identifies the identification system from which the provided identifier was assigned.',
        title='Identification System Type',
    )
    id: str


class SecuritySensitivityLevel(Enum):
    low = 'low'
    moderate = 'moderate'
    high = 'high'


class InformationType(OscalBaseModel):
    uuid: Optional[
        constr(
            regex=r'^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$'
        )
    ] = Field(
        None,
        description='A RFC 4122 version 4 Universally Unique Identifier (UUID) for the containing object.',
        title='Universally Unique Identifier',
    )
    title: Any
    description: Any
    information_type_ids: Optional[Dict[str, InformationTypeId]] = Field(
        None, alias='information-type-ids'
    )
    properties: Optional[List] = Field(None, min_items=1)
    confidentiality_impact: Any = Field(..., alias='confidentiality-impact')
    integrity_impact: Any = Field(..., alias='integrity-impact')
    availability_impact: Any = Field(..., alias='availability-impact')


class SystemInformation(OscalBaseModel):
    properties: Optional[List[Property]] = Field(None, min_items=1)
    annotations: Optional[List[Annotation]] = Field(None, min_items=1)
    links: Optional[List[Link]] = Field(None, min_items=1)
    information_types: List[InformationType] = Field(
        ..., alias='information-types', min_items=1
    )


class SecurityObjectiveConfidentiality(Enum):
    fips_199_low = 'fips-199-low'
    fips_199_moderate = 'fips-199-moderate'
    fips_199_high = 'fips-199-high'


class SecurityObjectiveIntegrity(Enum):
    fips_199_low = 'fips-199-low'
    fips_199_moderate = 'fips-199-moderate'
    fips_199_high = 'fips-199-high'


class SecurityObjectiveAvailability(Enum):
    fips_199_low = 'fips-199-low'
    fips_199_moderate = 'fips-199-moderate'
    fips_199_high = 'fips-199-high'


class SecurityImpactLevel(OscalBaseModel):
    security_objective_confidentiality: Optional[
        SecurityObjectiveConfidentiality
    ] = Field(
        None,
        alias='security-objective-confidentiality',
        description='A target-level of confidentiality for the system, based on the sensitivity of information within the system.',
        title='Security Objective: Confidentiality',
    )
    security_objective_integrity: Optional[SecurityObjectiveIntegrity] = Field(
        None,
        alias='security-objective-integrity',
        description='A target-level of integrity for the system, based on the sensitivity of information within the system.',
        title='Security Objective: Integrity',
    )
    security_objective_availability: Optional[SecurityObjectiveAvailability] = Field(
        None,
        alias='security-objective-availability',
        description='A target-level of availability for the system, based on the sensitivity of information within the system.',
        title='Security Objective: Availability',
    )


class State(Enum):
    operational = 'operational'
    under_development = 'under-development'
    under_major_modification = 'under-major-modification'
    disposition = 'disposition'
    other = 'other'


class Status(OscalBaseModel):
    state: State = Field(
        ..., description='The current operating status.', title='State'
    )
    remarks: Optional[str] = Field(
        None, description='Additional commentary on the parent item.', title='Remarks'
    )


class AuthorizationBoundary(OscalBaseModel):
    description: str = Field(
        ...,
        description='A description supporting the parent item.',
        title='Description',
    )
    properties: Optional[List[Property]] = Field(None, min_items=1)
    annotations: Optional[List[Annotation]] = Field(None, min_items=1)
    links: Optional[List[Link]] = Field(None, min_items=1)
    diagrams: Optional[Dict[str, Diagram]] = None
    remarks: Optional[str] = Field(
        None, description='Additional commentary on the parent item.', title='Remarks'
    )


class NetworkArchitecture(OscalBaseModel):
    description: str = Field(
        ...,
        description='A description supporting the parent item.',
        title='Description',
    )
    properties: Optional[List[Property]] = Field(None, min_items=1)
    annotations: Optional[List[Annotation]] = Field(None, min_items=1)
    links: Optional[List[Link]] = Field(None, min_items=1)
    diagrams: Optional[Dict[str, Diagram]] = None
    remarks: Optional[str] = Field(
        None, description='Additional commentary on the parent item.', title='Remarks'
    )


class DataFlow(OscalBaseModel):
    description: str = Field(
        ...,
        description='A description supporting the parent item.',
        title='Description',
    )
    properties: Optional[List[Property]] = Field(None, min_items=1)
    annotations: Optional[List[Annotation]] = Field(None, min_items=1)
    links: Optional[List[Link]] = Field(None, min_items=1)
    diagrams: Optional[Dict[str, Diagram]] = None
    remarks: Optional[str] = Field(
        None, description='Additional commentary on the parent item.', title='Remarks'
    )


class SystemCharacteristics(OscalBaseModel):
    system_ids: List[SystemId] = Field(..., alias='system-ids', min_items=1)
    system_name: str = Field(
        ...,
        alias='system-name',
        description='The full name of the system.',
        title='System Name (Full)',
    )
    system_name_short: Optional[str] = Field(
        None,
        alias='system-name-short',
        description='A short name for the system, such as an acronym, that is suitable for display in a data table or summary list.',
        title='System Name (Short)',
    )
    description: str = Field(
        ...,
        description='A description supporting the parent item.',
        title='Description',
    )
    properties: Optional[List[Property]] = Field(None, min_items=1)
    annotations: Optional[List[Annotation]] = Field(None, min_items=1)
    links: Optional[List[Link]] = Field(None, min_items=1)
    date_authorized: Optional[
        constr(
            regex=r'^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))(Z|[+-][0-9]{2}:[0-9]{2})?$'
        )
    ] = Field(
        None,
        alias='date-authorized',
        description='The date this system received its authorization.',
        title='System Authorization Date',
    )
    security_sensitivity_level: SecuritySensitivityLevel = Field(
        ...,
        alias='security-sensitivity-level',
        description='The overall information system sensitivity categorization, such as defined by FIPS-199.',
        title='Security Sensitivity Level',
    )
    system_information: SystemInformation = Field(
        ...,
        alias='system-information',
        description='Contains details about all information types that are stored, processed, or transmitted by the system, such as privacy information, and those defined in NIST SP 800-60.',
        title='System Information',
    )
    security_impact_level: SecurityImpactLevel = Field(
        ...,
        alias='security-impact-level',
        description='The overall level of expected impact resulting from unauthorized disclosure, modification, or loss of access to information.',
        title='Security Impact Level',
    )
    status: Status = Field(
        ...,
        description='Describes the operational status of the system.',
        title='Status',
    )
    authorization_boundary: AuthorizationBoundary = Field(
        ...,
        alias='authorization-boundary',
        description="A description of this system's authorization boundary, optionally supplemented by diagrams that illustrate the authorization boundary.",
        title='Authorization Boundary',
    )
    network_architecture: Optional[NetworkArchitecture] = Field(
        None,
        alias='network-architecture',
        description="A description of the system's network architecture, optionally supplemented by diagrams that illustrate the network architecture.",
        title='Network Architecture',
    )
    data_flow: Optional[DataFlow] = Field(
        None,
        alias='data-flow',
        description='A description of the logical flow of information within the system and across its boundaries, optionally supplemented by diagrams that illustrate these flows.',
        title='Data Flow',
    )
    responsible_parties: Optional[Dict[str, ResponsibleParty]] = Field(
        None, alias='responsible-parties'
    )
    remarks: Optional[str] = Field(
        None, description='Additional commentary on the parent item.', title='Remarks'
    )


class LeveragedAuthorization(OscalBaseModel):
    uuid: constr(
        regex=r'^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$'
    ) = Field(
        ...,
        description='A RFC 4122 version 4 Universally Unique Identifier (UUID) for the containing object.',
        title='Universally Unique Identifier',
    )
    title: str = Field(
        ..., description='A title for display and navigation', title='Title'
    )
    properties: Optional[List[Property]] = Field(None, min_items=1)
    annotations: Optional[List[Annotation]] = Field(None, min_items=1)
    links: Optional[List[Link]] = Field(None, min_items=1)
    party_uuid: constr(
        regex=r'^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$'
    ) = Field(
        ...,
        alias='party-uuid',
        description='References a party defined in metadata.',
        title='Party Reference',
    )
    date_authorized: constr(
        regex=r'^((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))(Z|[+-][0-9]{2}:[0-9]{2})?$'
    ) = Field(
        ...,
        alias='date-authorized',
        description='The date this system received its authorization.',
        title='System Authorization Date',
    )
    remarks: Optional[str] = Field(
        None, description='Additional commentary on the parent item.', title='Remarks'
    )


class SystemInventory(OscalBaseModel):
    inventory_items: Dict[str, InventoryItems] = Field(..., alias='inventory-items')
    remarks: Optional[str] = Field(
        None, description='Additional commentary on the parent item.', title='Remarks'
    )


class SystemImplementation(OscalBaseModel):
    properties: Optional[List[Property]] = Field(None, min_items=1)
    annotations: Optional[List[Annotation]] = Field(None, min_items=1)
    links: Optional[List[Link]] = Field(None, min_items=1)
    leveraged_authorizations: Optional[List[LeveragedAuthorization]] = Field(
        None, alias='leveraged-authorizations', min_items=1
    )
    users: Dict[str, Users]
    components: Optional[Dict[str, Component]] = None
    system_inventory: Optional[SystemInventory] = Field(
        None,
        alias='system-inventory',
        description='A set of inventory-item entries that represent the managed inventory instances of the system.',
        title='System Inventory',
    )
    remarks: Optional[str] = Field(
        None, description='Additional commentary on the parent item.', title='Remarks'
    )


class ImplementedRequirement(OscalBaseModel):
    uuid: constr(
        regex=r'^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$'
    ) = Field(
        ...,
        description='A RFC 4122 version 4 Universally Unique Identifier (UUID) for the containing object.',
        title='Universally Unique Identifier',
    )
    control_id: str = Field(
        ...,
        alias='control-id',
        description='A reference to a control identifier.',
        title='Control Identifier Reference',
    )
    properties: Optional[List[Property]] = Field(None, min_items=1)
    annotations: Optional[List[Annotation]] = Field(None, min_items=1)
    links: Optional[List[Link]] = Field(None, min_items=1)
    by_components: Optional[Dict[str, ByComponent]] = Field(
        None, alias='by-components'
    )
    responsible_roles: Optional[Dict[str, ResponsibleRole]] = Field(
        None, alias='responsible-roles'
    )
    parameter_settings: Optional[Dict[str, SetParameter]] = Field(
        None, alias='parameter-settings'
    )
    statements: Optional[Dict[str, Statement]] = None
    remarks: Optional[str] = Field(
        None, description='Additional commentary on the parent item.', title='Remarks'
    )


class ControlImplementation(OscalBaseModel):
    description: str = Field(
        ...,
        description='A description supporting the parent item.',
        title='Description',
    )
    implemented_requirements: List[ImplementedRequirement] = Field(
        ..., alias='implemented-requirements', min_items=1
    )


class Citation(OscalBaseModel):
    text: str = Field(
        ...,
        description='A line of textual content whose semantic is determined by the context of use.',
        title='Text',
    )
    properties: Optional[List[Property]] = Field(None, min_items=1)
    biblio: Optional[Dict[str, Any]] = Field(
        None,
        description='A container in which a set of bibliographic information can included. The model of this information is undefined by OSCAL.',
        title='Bibliographic Definition',
    )


class Hash(OscalBaseModel):
    algorithm: str = Field(
        ..., description='Method by which a hash is derived', title='Hash algorithm'
    )
    value: str


class Rlink(OscalBaseModel):
    href: str = Field(
        ...,
        description='A link to a document or document fragment (actual, nominal or projected)',
        title='hypertext reference',
    )
    media_type: Optional[str] = Field(
        None,
        alias='media-type',
        description='Describes the media type of the linked resource',
        title='Media type',
    )
    hashes: Optional[List[Hash]] = Field(None, min_items=1)


class Attachment(OscalBaseModel):
    filename: Optional[str] = Field(
        None,
        description='Name of the file before it was encoded as Base64 to be embedded in a resource. This is the name that will be assigned to the file when the file is decoded.',
        title='File Name',
    )
    media_type: Optional[str] = Field(
        None,
        alias='media-type',
        description='Describes the media type of the linked resource',
        title='Media type',
    )
    value: str


class Resource(OscalBaseModel):
    uuid: constr(
        regex=r'^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$'
    ) = Field(
        ...,
        description='A RFC 4122 version 4 Universally Unique Identifier (UUID) for the containing object.',
        title='Universally Unique Identifier',
    )
    title: Optional[str] = Field(
        None, description='A title for display and navigation', title='Title'
    )
    desc: Optional[str] = Field(
        None, description='A short textual description', title='Description'
    )
    properties: Optional[List[Property]] = Field(None, min_items=1)
    document_ids: Optional[List[DocumentId]] = Field(
        None, alias='document-ids', min_items=1
    )
    citation: Optional[Citation] = Field(
        None,
        description='A citation consisting of end note text and optional structured bibliographic data.',
        title='Citation',
    )
    rlinks: Optional[List[Rlink]] = Field(None, min_items=1)
    attachments: Optional[List[Attachment]] = Field(None, min_items=1)
    remarks: Optional[str] = Field(
        None, description='Additional commentary on the parent item.', title='Remarks'
    )


class BackMatter(OscalBaseModel):
    resources: Optional[List[Resource]] = Field(None, min_items=1)


class SystemSecurityPlan(OscalBaseModel):
    uuid: constr(
        regex=r'^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$'
    ) = Field(
        ...,
        description='A RFC 4122 version 4 Universally Unique Identifier (UUID) for the containing object.',
        title='Universally Unique Identifier',
    )
    metadata: Metadata = Field(
        ...,
        description='Provides information about the publication and availability of the containing document.',
        title='Publication metadata',
    )
    import_profile: ImportProfile = Field(
        ...,
        alias='import-profile',
        description="Used to import the OSCAL profile representing the system's control baseline.",
        title='Import Profile',
    )
    system_characteristics: SystemCharacteristics = Field(
        ...,
        alias='system-characteristics',
        description='Contains the characteristics of the system, such as its name, purpose, and security impact level.',
        title='System Characteristics',
    )
    system_implementation: SystemImplementation = Field(
        ...,
        alias='system-implementation',
        description='Provides information as to how the system is implemented.',
        title='System Implementation',
    )
    control_implementation: ControlImplementation = Field(
        ...,
        alias='control-implementation',
        description='Describes how the system satisfies a set of controls.',
        title='Control Implementation',
    )
    back_matter: Optional[BackMatter] = Field(
        None,
        alias='back-matter',
        description='A collection of citations and resource references.',
        title='Back matter',
    )


class Model(OscalBaseModel):
    system_security_plan: SystemSecurityPlan = Field(..., alias='system-security-plan')

